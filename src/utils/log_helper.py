from typing import Protocol

from utils.log_level import LogLevel


class LogHelper(Protocol):
    """Describes something capable of writing logs to a backing store that might
    be slow relative to stdout and for which some amount of a stack trace is included
    in the message, meaning that keeping track of how many stack frames to skip is
    helpful for debugging.
    """

    async def flush(self) -> None: ...
    def write(self, msg: str) -> None: ...
    async def blocking_write(self, msg: str) -> None:
        """waits until the message has been posted to the final queue, meaning
        that it is guarranteed to be written during the next explicit `flush`
        """

    def log(self, level: LogLevel, message: str) -> None: ...
    def trace(self, message: str, depth: int = 1) -> None: ...
    def debug(self, message: str, depth: int = 1) -> None: ...
    def info(self, message: str, depth: int = 1) -> None: ...
    def success(self, message: str, depth: int = 1) -> None: ...
    def warning(self, message: str, depth: int = 1) -> None: ...
    def error(self, message: str, depth: int = 1) -> None: ...
    def critical(self, message: str, depth: int = 1) -> None: ...
    def exception(self, exc: BaseException, depth: int = 1) -> None: ...
